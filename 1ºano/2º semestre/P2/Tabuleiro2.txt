import java.util.*;
	import java.awt.Color;
	import java.awt.GridLayout;
	import javax.swing.JButton;
	import javax.swing.JFrame;
	
	public class Tabuleiro2 {
		Random r;
		int tamanho;
		int tab[][];
		int cores;
		int gerador;
		int [] coordenadas;
		int [] colunas;
		JFrame jframe = new JFrame ();
		JButton botao = new JButton ();
		
		
		
		Tabuleiro2 (int tamanho, int cores){
			this.tamanho= tamanho;
			this.tab = new int [tamanho][tamanho];
			this.cores= cores;
			r = new Random(gerador);
			this.criarTabuleiro();
			coordenadas = new int[tamanho*tamanho];
			colunas= new int [tamanho];
		}
		
		public void graphics(int numeros, JButton botao){
	        if (numeros == 1){
	            botao.setBackground(Color.red);
	        }else if (numeros == 2){
	            botao.setBackground(Color.green);
	        }else if (numeros == 3){
	            botao.setBackground(Color.yellow);
	        }else if (numeros == 4){
	            botao.setBackground(Color.blue);
	        }else if (numeros == 5){
	            botao.setBackground(Color.pink);
	        }else if (numeros == 6){
	            botao.setBackground(Color.orange);
	        }else if (numeros == 7){
	            botao.setBackground(Color.magenta);
	        }else if (numeros == 8){
	            botao.setBackground(Color.GRAY);
	        }else if (numeros == 9){
	            botao.setBackground(Color.BLACK);
	        }
	    }
		
		void criarTabuleiro(){
			jframe.setTitle("Fusion");
			jframe.setLayout(new GridLayout(tamanho,tamanho,5,5));
			jframe.setVisible(true);
			jframe.setSize(500, 500);
			
			
			for(int i=0; i<tamanho; i++){
				for (int j=0; j<tamanho; j++){
					int numeros = r.nextInt(cores)+1;
					tab[i][j]= numeros;
					botao= new JButton (String.valueOf(numeros));
					botao.setSize(50, 50);
					jframe.add(botao);
					
			
				}
			}
		}
		
		void printTabuleiro(){
			String s = new String();
			for (int i=0;i<tab.length;i++){
				for (int j=0;j<tab[0].length;j++){
					s=s+ tab [i][j]+ " ";
				}
				s=s+"\n";
			}
		System.out.println(s);
		}
		
		
		public int[][] verifica_vizinhos(int x,int y, int [][] coords){
			
			try{
				
				if(tab[y][x-1]==tab[y][x] && !verifica(x-1,y,coords)&& tab[y][x-1]!=0){
					if (tab[y][x+1]==tab[x][y] && !verifica(x+1,y,coords) && tab[y][x+1]!=0)
						coords = insereCoord(x,y,coords);
						coords = verifica_vizinhos(x-1,y,coords);
						coords = verifica_vizinhos(x+1,y,coords);
					}
					else if (tab[y][x-2]==tab[x][y] && !verifica(x-2,y,coords) && tab[y][x-2]!=0) {
						coords = insereCoord(x,y,coords);
						coords = verifica_vizinhos(x-1,y,coords);
						coords = verifica_vizinhos(x-2,y,coords);
					}
				else if (tab[y][x+1]==tab[y][x] && !verifica(x+1,y,coords)&& tab[y][x+1]!=0) {
					if (tab[y][x+2]==tab[y][x] && !verifica(x+2,y,coords)&& tab[y][x+2]!=0) {
						coords = insereCoord(x,y,coords);
						coords = verifica_vizinhos(x+1,y,coords);
						coords = verifica_vizinhos(x+2,y,coords);
					}
				}
					
			}		
			catch(IndexOutOfBoundsException e){
				
			}
			
			try{
				if(tab[y-1][x]==tab[y][x] && !verifica(x,y-1,coords)&& tab[y-1][x]!=0){
					if (tab[y+1][x]==tab[y][x] && !verifica(x,y+1,coords)&& tab[y+1][x]!=0) {
						coords = insereCoord(x,y,coords);
						coords = verifica_vizinhos(x,y-1,coords);
						coords = verifica_vizinhos(x,y+1,coords);
					}
					else if (tab[y-2][x]==tab[x][y] && !verifica(x,y-2,coords) && tab[y-2][x]!=0) {
						coords = insereCoord(x,y,coords);
						coords = verifica_vizinhos(x,y-1,coords);
						coords = verifica_vizinhos(x,y-2,coords);
					}
				else if (tab[y+1][x]==tab[y][x] && !verifica(x,y+1,coords)&& tab[y+1][x]!=0) {
					if (tab[y+2][x]==tab[y][x] && !verifica(x,y+2,coords)&& tab[y+2][x]!=0) {
						coords = insereCoord(x,y,coords);
						coords = verifica_vizinhos(x,y+1,coords);
						coords = verifica_vizinhos(x,y+2,coords);
					}
				 }
				}	
			}
			catch(IndexOutOfBoundsException e){
				
			}
			
			try{
				if(tab[y+1][x]==tab[y][x] && !verifica(x,y+1,coords) && tab[y+1][x]!=0){

					coords = insereCoord(x,y,coords);
					coords = verifica_vizinhos(x,y+1,coords);
					
				}
					
			}catch(IndexOutOfBoundsException e){
				
			}
			
			if (!verifica(x,y,coords)){
				insereCoord(x,y,coords);
			}
			
			return coords;
		}
		 
		

		public boolean verifica(int x, int y, int [][] coords){
			boolean result = false;
			for (int i =0; i<coords.length; i++){
				if (coords[i][0]==x && coords[i][1]==y){
					result = true;
				}
			}
			return result; 
		}
		
		

		public int [][] insereCoord (int x, int y, int [][] coords){
			for (int i=0; i<coords.length; i++){
				if (coords[i][0]==33){
					coords[i][0]=x;
					coords[i][1]=y;
					break;
				}
			}
			return coords;
		}
		

		



		public boolean verifica_pos(int x, int y, int [][] coords){
			coords= this.verifica_vizinhos(x, y, coords);
			if(y<0 || x<0 || y>tamanho-1 || x>tamanho-1 || coords[1][0]==33 || tab[y][x]==0){
				return false;
			}
			return true;
		}
		
		
		public boolean verificaColunas(){
			for (int x=0; x<tab.length; x++){
				boolean var1 = true;
				for(int y=0; y<tab.length; y++){
					if (tab[y][x]==0 && y==tab.length-1){
						for (int i=0;i<colunas.length;i++){
							if (colunas[i]==x){
								var1=false;
							}
						}
						if (var1){
							return true;
						}
					}else if(tab[y][x]!=0){
						break;
					}
				}
			}
			return false;
		}
		
		
		
		void arrumaTabuleiro(int change){
			int var=0;
			if (change==0){
				for (int y=0; y <tab.length; y++){
					for(int repeat=0; repeat<tab.length; repeat++){
						for (int x=tab.length-1; x>0; x--){
							if(tab[y][x]==0 && tab[y][x-1]!=0){
								var=tab[y][x];
								tab[y][x]=tab[y][x-1];
								tab[y][x-1]=var;
							}
						}
					}
				}
			}else{
				for (int x=0; x <tab.length; x++){
					for(int repeat=0; repeat<tab.length; repeat++){
						for (int y=tab.length-1; y>0; y--){
							if(tab[y][x]==0 && tab[y-1][x]!=0){
								var=tab[y][x];
								tab[y][x]=tab[y-1][x];
								tab[y-1][x]=var;
							}
						}
					}
				}
			}
		}
		
		
		
		public void jogadas(int[][] coords) {
			for (int i=0; i<coords.length;i++){
				if (coords[i][0]!=33){
					tab[coords[i][1]][coords[i][0]]=0;
				}
			}
			this.arrumaTabuleiro(1);
			if (this.verificaColunas()){
				this.arrumaTabuleiro(0);
			}
		}
		
		
		public boolean fim_de_jogo (){
			
			for (int x=0; x<tamanho; x++){
				for (int y=0; y<tamanho; y++){
					int coords[][]=new int [tamanho*tamanho][2];
					for( int i=0; i<coords.length; i++ ){
						coords[i][0]=33;
					}
					coords= this.verifica_vizinhos(x, y, coords);
					
					
					if (coords[1][0]!=33){
						return false;
					}
				}
			}
		
			return true;
		}
		

		public int pontos(){
			int valor = tamanho*tamanho;
			for (int i=0; i<tab.length; i++){
				for (int j=0; j<tab.length; j++){
					if (tab[i][j]!=0){
						valor--;
					}
				}
			}
			return valor;
		}


	}


